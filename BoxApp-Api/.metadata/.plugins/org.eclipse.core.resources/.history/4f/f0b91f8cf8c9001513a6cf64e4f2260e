package com.jcs.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import com.box.sdk.BoxAPIConnection;
import com.box.sdk.BoxFolder;

/*import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;*/

import com.google.gson.Gson;
import com.jcs.box.BoxTest;
import com.jcs.model.Claim;
import com.jcs.model.User;
import com.jcs.model.Vehicle;
import com.jcs.service.BoxService;

/*import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataParam;
*/
@Path("/claim")
public class HomeController {

	@GET
	@Path("/Auth")
	@Produces(MediaType.APPLICATION_JSON)
	public List<User> getUsers() {

		List<User> usr = new ArrayList<User>();
		BoxService service = new BoxService();
		service.dummypush();
		try {
			usr = service.fetchAll();
		} catch (Exception e) {

			e.printStackTrace();
		}

		Gson gson = new Gson();
		String Json = null;
		try {
			// Json = gson.toJson(usr);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return usr;
	}

	@GET
	@Path("/Auth1")
	@Produces(MediaType.APPLICATION_JSON)
	public User getuser(@QueryParam(value = "email") String email) {

		// boxservice.dummypush();

		BoxService service = new BoxService();
		User user = new User();
		try {
			user = service.fetchone(email);
		} catch (Exception e) {

			e.printStackTrace();
		}
		System.out.println("i am in" + email);

		return user;
	}

	@GET
	@Path("/claims")
	@Produces(MediaType.APPLICATION_JSON)
	public String getClaim(@QueryParam(value = "email") String email) {

		BoxService service = new BoxService();

		// service.dummypushClaim();

		List<Claim> claim = new ArrayList<Claim>();

		try {
			claim = service.fetchAllClaim(email); // get all claims for the
													// particular user
		} catch (Exception e) {

			e.printStackTrace();
		}

		Gson gson = new Gson();
		String Json = null;
		try {
			Json = gson.toJson(claim);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return Json;
	}

	@GET
	@Path("/claims/agent")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Claim> getAgentClaim(@QueryParam(value = "status") String status) {

		BoxService service = new BoxService();
		List<Claim> claim;
		try {
			claim = service.fetchAllClaimPending(status);
			return claim;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@POST
	@Path("/claim/create")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Claim createClaim(@QueryParam(value = "email") String email, Claim claim) {

		BoxService service = new BoxService();

		Claim responseClaim = null;

		try {
			responseClaim = service.createClaim(claim, email);
		} catch (Exception e) {

			e.printStackTrace();
		}
		System.out.println(claim.getCauseOfLoss());
		System.out.println(email);

		return responseClaim;

	}

	@POST
	@Path("/claim/vehicle")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Vehicle createVehicle(@QueryParam(value = "email") String email, Vehicle vehicle) {

		System.out.println(email + vehicle.getClaimNumber());
		BoxService service = new BoxService();

		try {
			Vehicle responseVehicle = service.createVehicle(vehicle, email);
		} catch (Exception e) {

			e.printStackTrace();
		}

		return vehicle;
	}

	@PUT
	@Path("/claims/update")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Claim updateClaim(Claim claim) {

		BoxService service = new BoxService();

		Claim c = service.updateClaim(claim);

		return c;
	}

	@GET
	@Path("/Adjustor")
	@Produces(MediaType.APPLICATION_JSON)
	public List<User> getAdjustor() {

		BoxService service = new BoxService();

		List<User> adjustors = service.getAdjustors();

		return adjustors;
	}

	@GET
	@Path("/AdjustorClaim")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Claim> getAdjustorClaim(@QueryParam(value = "user") String user) {

		BoxService service = new BoxService();

		List<Claim> claims = service.fetchAdjustorClaims(user);

		return claims;

	}

	@GET
	@Path("/AdjustorClaimApproved")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Claim> getAdjustorClaimApproved(@QueryParam(value = "status") String status) {

		BoxService service = new BoxService();

		List<Claim> claims = service.fetchAdjustorClaimApproved(status);

		return claims;

	}
	
	// upload a file to the claim 
	@POST
	@Path("/uploadcalim")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	public Response uploadClaimFile(
		@FormDataParam("file") InputStream uploadedInputStream,
		@FormDataParam("file") FormDataContentDisposition fileDetail) {
			
		
		
		
		
		String output = "File uploaded Claim no :" + " // add the claim name here   ";
		
		
		return Response.status(200).entity(output).build();
	}
	
	
	
	
	
	
	

	@GET
	@Path("/box")
	@Produces(MediaType.APPLICATION_JSON)
	public String box() {

		BoxTest t = new BoxTest();

		try {
			t.test();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "This is a box test";

	}

	// file handle function
	
	@POST
	@Path("/upload")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	public Response uploadFile(
		@FormDataParam("file") InputStream uploadedInputStream,
		@FormDataParam("file") FormDataContentDisposition fileDetail) {

		String uploadedFileLocation = "/Users/bushan/eclipse/" + fileDetail.getFileName();

		// save it
		writeToFile(uploadedInputStream, uploadedFileLocation);

		String output = "File uploaded to : " + uploadedFileLocation;

		return Response.status(200).entity(output).build();

	}
	
	private void writeToFile(InputStream uploadedInputStream,
			String uploadedFileLocation) {
		
		BoxAPIConnection api = new BoxAPIConnection("vlGnJZyAxPmIoYMkutqLNLzhsMAOogLa");
		BoxFolder rootFolder = BoxFolder.getRootFolder(api);
		rootFolder.uploadFile(uploadedInputStream, "My File.pdf");
	
			//uploadedInputStream.close();
	}
	
	
	
	

	
	
}
