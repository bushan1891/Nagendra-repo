package com.jcs.service;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Timestamp;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.box.sdk.BoxAPIConnection;
import com.box.sdk.BoxFile;
import com.box.sdk.BoxFolder;
import com.box.sdk.BoxItem;
import com.jcs.model.*;
import com.jcs.util.BoxUtil;
import com.jcs.util.HibernateUtil;

public class BoxService {

	private EntityManager entityManager;

	public List<Claim> dummypushClaim() {

		List<Claim> claim = new ArrayList<Claim>();
		Set<Vehicle> vehicle = new HashSet<Vehicle>();

		Claim c = new Claim();
		Vehicle v = new Vehicle();

		c.setClaimID("cllaim new");

		v.setVin("vinno");

		vehicle.add(v);
		claim.add(c);

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();

		try {
			session.save(v);
			session.save(c);
			session.getTransaction().commit();
			System.out.println("dummy data pushed at claim ");
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return claim;
	}

	public List<User> dummypush() {

		User usr = new User();
		UserInfo usrinfo = new UserInfo();
		/*
		 * Claim claim = new Claim(); List<Claim> c = new ArrayList<Claim>();
		 */
		// claim.setClaiminfo("i am a claim");

		usr.setUserEmail("bushan1891@gmail.com");
		usr.setUserinfo(usrinfo);
		usr.setUserKey("password");
		usr.setUserName("nagendra");
		usr.setUserType("Agent");
		// usr.setClaims(c);

		/*
		 * claim.setUserID(usr.getUserID()); c.add(claim);
		 */

		usrinfo.setAddress("9135 judicial drive apt 3132");
		usrinfo.setEmail("bushan1891@gmail.com");
		usrinfo.setPhone(858760000);
		usrinfo.setTitle("developer");

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();

		List<User> list = new ArrayList<User>();
		list.add(usr);
		try {
			// session.save(claim);
			session.save(usrinfo);
			session.save(usr);
			session.getTransaction().commit();
			System.out.println("dummy data pushed");
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println();
		return list;

	}

	public List<User> fetchAll() throws Exception {

		List<User> user = new ArrayList<User>();
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {
			user = session.createQuery("From User").list();
			session.getTransaction().commit();
			session.close();
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return user;

	}

	public User fetchone(String email) throws Exception {

		

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {
			String hql = "from User u where u.UserEmail = :email";
			List<User> result = session.createQuery(hql).setParameter("email", email).list();

			return result.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public List<Claim> fetchAllClaim(String email) throws Exception {

		User usr = fetchone(email);

		List<Claim> claimlist = new ArrayList<Claim>();

		List<Claim> claim = new ArrayList<Claim>();
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {
			claim = session.createQuery("From Claim").list();
			session.getTransaction().commit();
			session.close();
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		// filtering claims with respect to the user claim can be done on db
		// side

		for (Claim c : claim) {
			int x = Character.getNumericValue(c.getClaimID().charAt(0));
			if (x == usr.getUserID()) {
				claimlist.add(c);
			}
		}

		return claimlist;

	}

	// fetching all the claims for the agent based on the status
	public List<Claim> fetchAllClaimPending(String status) throws Exception {

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {

			String hql = "from Claim c where c.status = :status";
			List<Claim> result = session.createQuery(hql).setParameter("status", status).list(); // loads
																									// the
																									// value
																									// based
																									// on
																									// the
																									// status
			session.getTransaction().commit();
			session.close();
			return result;
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public Claim createClaim(Claim claim, String email) throws Exception {

		// assign claim id as the user id

		User usr = fetchone(email);
		String str = usr.getUserID() + "claim" + claim.getClaimID();

		claim.setClaimID(str); // custom claim no generator
		claim.setAssignedAdjuster(""); // have to change this
		claim.setStatus("pending"); // setting the claim to pending initially
		claim.setAdjustorStatus("Pending"); // check this once you are over
											// writing
		// this in the front end to this should
		// not be here

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();

		try {

			session.save(claim);
			session.getTransaction().commit();
			System.out.println(" request to push claim has been pushed ");
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return claim;
	}

	public Vehicle createVehicle(Vehicle vehicle, String email) throws Exception {

		User usr = fetchone(email);

		// vehicle.setId(usr.getUserID());

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {

			String hql = "from Claim c where c.Vehicle = :vin";
			List<Claim> result = session.createQuery(hql).setParameter("vin", vehicle.getVin()).list();

			vehicle.setClaimNumber(result.get(0).getClaimID());
            vehicle.setUserid(usr.getUserID());
			session.save(vehicle);
			session.getTransaction().commit();
			System.out.println(" request to push Vehicle has been pushed ");
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return vehicle;
	}
	
	
	public List<Vehicle> fetchVehicle(int userid){
		
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {

			String hql = "from Vehicle v where v.userid = :vid";
			List<Vehicle> result = session.createQuery(hql).setParameter("id",userid ).list();
			session.getTransaction().commit();
			System.out.println(" request to pull the vehicle succecssful ");
			session.close();
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
		
	}
	
	
	public User fetchUser(int id){
		
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		try {
			String hql = "from User u where u.UserID = :id";
			List<User> result = session.createQuery(hql).setParameter("id", id).list();

			return result.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
		
		
		
	}

	public Claim updateClaim(Claim claim) {

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			Claim c = (Claim) session.get(Claim.class, claim.getClaimID());
			c.setStatus(claim.getStatus());
			c.setAssignedAdjuster(claim.getAssignedAdjuster());
			c.setAdjustorStatus(claim.getAdjustorStatus());
			session.update(c);
			System.out.println(c.getStatus());
			tx.commit();
			session.close();
			return c;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public List<User> getAdjustors() {

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			String hql = "from User u where u.UserType = 'Adjustor'";
			List<User> result = session.createQuery(hql).list();
			tx.commit();
			session.close();

			return result;
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	// fetch all claims with assigned adjustor for the adjustorvm

	public List<Claim> fetchAdjustorClaims(String user) {

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = null;

		System.out.println(user + "in service");

		try {
			tx = session.beginTransaction();
			String hql = "from Claim c where c.assignedAdjuster='" + user + "'";
			List<Claim> result = session.createQuery(hql).list();

			System.out.println(result.get(0).getFirstName());
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public List<Claim> fetchAdjustorClaimApproved(String status) {

		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			String hql = "from Claim c where c.AdjustorStatus='Approved'";
			List<Claim> result = session.createQuery(hql).list();

			System.out.println(result.get(0).getFirstName());
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public void uploadClaimFile(InputStream uploadedInputStream, String name) {

		Date date = new Date();
		long time = date.getTime();
		Timestamp ts = new Timestamp(time);

		System.out.println("Current Time Stamp: " + ts);
		 int id = Character.getNumericValue(name.charAt(0));
		name = name + ts + ".pdf";

		BoxAPIConnection api = BoxUtil.getApi();
		BoxFolder rootFolder = BoxUtil.getClaimFolder();
		//rootFolder.uploadFile(uploadedInputStream, name);
		
		// to re-structure our code 
		try {
			createBoxUserFolder();
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		
	   // pushing to user folder 
		
	   	
	      System.out.println(id);
	      User user = fetchUser(id);
		
	      // setting our box root folder 
	      
	      BoxFolder userfolder = BoxUtil.getUserFolder();
	    
	      BoxItem.Info info = BoxUtil.getSearchResult(userfolder, user.getUserID()+"-"+user.getUserName()+"-"+user.getUserType() );
	      System.out.println();
	      
	      BoxFolder upfolder =  new BoxFolder(api, info.getID());
	      upfolder.uploadFile(uploadedInputStream, name);
	      

	}

	public String rename(String claim) {

		BoxAPIConnection api = BoxUtil.getApi();
		BoxFolder rootFolder = BoxUtil.getClaimFolder();
		String str = "claim.pdf";
		for (BoxItem.Info itemInfo : rootFolder) {
			System.out.println(itemInfo.getName());
			if (itemInfo.getName().equals(str)) {
				BoxFile file = new BoxFile(api, itemInfo.getID());
				BoxFile.Info info = file.new Info();
				info.setName(claim);
				file.updateInfo(info);
				return "updated";
			}
		}
		System.out.println("did not update anything");

		return "failed";
	}

	// creates the user folder and stores the id in userIfo

	public String createBoxUserFolder() throws Exception {

		BoxAPIConnection api = BoxUtil.getApi();
		BoxFolder rootFolder = BoxUtil.getUserFolder();

		List<User> users = fetchAll();
		
	     for(User usr : users ){
	    	 BoxItem.Info info = BoxUtil.getSearchResult(rootFolder, usr.getUserID()+"-"+usr.getUserName()+"-"+usr.getUserType() );
	    	 
	    	 if( info==null ){
	    		
	    		 BoxFolder.Info childFolderInfo = rootFolder.createFolder(usr.getUserID()+"-"+usr.getUserName()+"-"+usr.getUserType() ); 
	    	 }
	    	 
	    	 else{
	    		 System.out.println("user folder valid");
	    	 }
	    	 
	     }
		
		
		return null;
	}

}